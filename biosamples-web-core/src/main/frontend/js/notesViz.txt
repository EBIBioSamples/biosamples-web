#index.html

<!DOCTYPE html>
<meta charset="utf-8">
<script src="http://d3js.org/d3.v2.min.js?2.9.3"></script>
<style>

.link {
  stroke: #aaa;
}

.node text {
stroke:#333;
cursos:pointer;
}

.node circle{
stroke:#fff;
stroke-width:3px;
fill:#555;
}

</style>
<body>
<script>

var width = 960,
    height = 500

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var force = d3.layout.force()
    .gravity(.05)
    .distance(100)
    .charge(-100)
    .size([width, height]);

d3.json("graphFile.json", function(json) {
  force
      .nodes(json.nodes)
      .links(json.links)
      .start();

  var link = svg.selectAll(".link")
      .data(json.links)
    .enter().append("line")
      .attr("class", "link")
    .style("stroke-width", function(d) { return Math.sqrt(d.weight); });

  var node = svg.selectAll(".node")
      .data(json.nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(force.drag);

  node.append("circle")
      .attr("r","5");

  node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.name });

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  });
});

</script>






#graphFile.json

{
  "nodes":[
		{"name":"node1","group":1},
		{"name":"node2","group":2},
		{"name":"node3","group":2},
		{"name":"node4","group":3}
	],
	"links":[
		{"source":2,"target":1,"weight":1},
		{"source":0,"target":2,"weight":3}
	]
}



// Data loading trials
/*
d3.json("flare.json", function(error, root) {
  if (error) throw error;

  var nodes = tree.nodes(root),
      links = tree.links(nodes);

  var link = svg.selectAll(".link")
      .data(links)
    .enter().append("path")
      .attr("class", "link")
      .attr("d", diagonal);

  var node = svg.selectAll(".node")
      .data(nodes)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })

  node.append("circle")
      .attr("r", 4.5);

  node.append("text")
      .attr("dy", ".31em")
      .attr("text-anchor", function(d) { return d.x < 90 ? "start" : "end"; })
      .attr("transform", function(d) { return d.x < 90 ? "translate(8)" : "rotate(90)translate(-8)"; })
      .text(function(d) { return d.name; });
});
*/
//d3.json(results.data.response.docs, function(error, root) {
/*
d3.json(results, function(error, root) {
  console.log("Data loaded from the response given by the search");
  console.log("root : "); console.log(root);
}).catch(function (data, status, response) {
  console.log(status);
});
*/




// Test Images
  /*
  // Image fake data
  if ( results.data.response.docs[i].accession == "SAMEA1652705"){
    results.data.response.docs[i].urlSimpleImg="www.w3schools.com/images/w3schools_green.jpg";
    results.data.response.docs[i].urlArrayImg=["www.w3schools.com/images/w3schools_green.jpg","https://www.dragon1.com/images/examples.jpg"];
    results.data.response.docs[i].urlImg="www.w3schools.com/images/w3schools_green.jpg,https://www.dragon1.com/images/examples.jpg";
  }
  */


  // There is no link from a group to the samples which are part of it.



// Previous code for circle attribute 

  //Add the circle attributes
  /*
  var circleAttributes = circles
    //.attr("x",function(d){return d.x;}) .attr("y",function(d){return d.y;})
    .attr("cx", function (d) { return d.cx; }) .attr("cy", function (d) { return d.cy; })
    .attr("r", function (d) { return d.radius; })
    .attr("accession",function(d){return d.accession})
    .attr("responseDoc",function(d){return d.responseDoc})
    .attr("id", function (d) { return d.id; })
    .attr("type", function (d) { return d.type; })
    .style("fill", function (d) { return d.color; });

    //Add the SVG Text Element to the svgContainer
    var text = svg.selectAll("text").data(nodeData)
    .enter().append("text");

    //Add the text attributes
    var textLabels = text.attr("x", function(d) { return d.cx + d.radius; }).attr("y", function(d) { return d.cy; })
     .text( function (d) { return "[" + d.accession+"]"; })
     .attr("font-family", "sans-serif").attr("font-size", "10px")
     .attr("border","solid").attr("border-radius","10px")
     .style("border","solid").style("border-radius","10px")
     .style("box-shadow","gray")
     .style("background-color","green")
     .attr("class","text-d3")
     .attr("fill", "#4D504F");
  */


// 

/*
if ( document.getElementById("infoVizRelations").style.visibility == "hidden"){
  document.getElementById("infoVizRelations").style.visibility="visible";
  console.log("d3.select(\"#vizSpot\")");console.log(d3.select("#vizSpotRelations"));
  console.log("d3.select(\"svg\")");console.log(d3.select("svg"));
  d3.select("#vizSpotRelations").attr("width","70%");
} else {
  if ( d.accession ==  document.getElementById("infoVizRelations").className ){
    document.getElementById("infoVizRelations").style.visibility="hidden";
    d3.select("#vizSpotRelations").attr("width","100%");
  } else {
    document.getElementById("infoVizRelations").style.visibility="visible";
    d3.select("#vizSpotRelations").attr("width","70%");
  }
}
*/


// Version with links to all the elements sharing the same group 

  //console.log("accessionToIndex : ");console.log(accessionToIndex);
  console.log("---------------------------");
  //var indexGroup=0;
  for (var group in groupsReturned){
    //console.log("in group : "+group);
    //console.log("groupsReturned[group] : ");console.log(groupsReturned[group]);
    for (var i=0; i < groupsReturned[group].length;i++){
      //console.log("groupsReturned[group][i] : ");console.log(groupsReturned[group][i]);
      //console.log("nameToNodeIndex[ groupsReturned[group][i] ] : ");console.log(nameToNodeIndex[ groupsReturned[group][i] ]);
      if ( typeof nameToNodeIndex[ groupsReturned[group][i] ] !== "undefined" ){
        for (var j=i; j< groupsReturned[group].length;j++){
          nodeData.nodes[nameToNodeIndex[ groupsReturned[group][i]]].group=""+group;
          nodeData.nodes[nameToNodeIndex[ groupsReturned[group][j]]].group=""+group;
          nodeData.groups[ nameToNodeIndex[ groupsReturned[group][i]] ] = group;
          nodeData.groups[ nameToNodeIndex[ groupsReturned[group][j]] ] = group;
          nodeData.links.push({
            "source": nameToNodeIndex[ groupsReturned[group][i] ],
            "target": nameToNodeIndex[ groupsReturned[group][j] ],
            "weight": Math.sqrt(groupsReturned[group].length)
          })
        }
      }
    }
  }




//////////////
application.properties

solr.server                         http://optimus.windows.ebi.ac.uk:8983/solr/
solr.searchapi.server               http://beans.ebi.ac.uk:8989/solr/merged_core/select?
spring.data.rest.base-path          /api
spring.data.rest.default-page-size  50
spring.thymeleaf.mode               LEGACYHTML5


/////

solr.server                         http://optimus.windows.ebi.ac.uk:8983/solr/
solr.searchapi.server               http://beans.ebi.ac.uk:8989/solr/merged/select?
spring.data.rest.base-path          /api
spring.data.rest.default-page-size  50
spring.thymeleaf.mode               LEGACYHTML5


///////
// Nodes relationships here
var svg;
if ( document.getElementById("vizSpotRelations") === null ){            
  svg = d3.select(".container").insert("svg",":first-child")
        // set x and Width of div #content
        //.attr("width", "100%")
        .attr("width", "60%")
        .attr("height", heightD3)
        .attr("id","vizSpotRelations")
        //.style("stroke", "black")
        .style("stroke","green")
        .style("stroke-width", 1)
        .style("border","solid")
        .style("overflow","scroll")
        .style("border-color","#5D8C83")
        .style("border-radius","10px")
        .call(d3.behavior.zoom().on("zoom", (function (d) {
            /*
            console.log("onzoom d : ");console.log(d);
            console.log("onzoom d3 : ");console.log(d3);
            */
            svg.attr("transform", 
              "translate(" + d3.event.translate + ")" + 
              " scale(" + d3.event.scale + ")"
              );
          })
        ) )
        .append("g")
        //.call(zoom)
        ;
        //.append("g");
        //.attr("transform", "translate(" + widthD3 / 2 + "," + widthD3 / 2 + ")");
  //console.log("vizSpotRelations null and svg : ");console.log(svg);
} else {
  d3.select("#vizSpotRelations").remove();
  document.getElementById("infoVizRelations").style.visibility="hidden";            
  svg = d3.select(".container").insert("svg",":first-child")
    //.attr("width", "100%")
    .attr("width", "60%")
    .attr("height", heightD3)
    .attr("id","vizSpotRelations")
    .style("stroke", "black")
    .style("stroke-width", 1)
    .style("border","solid")
    .style("overflow","scroll")
    .style("border-color","#5D8C83")
    .style("border-radius","10px")
    .call(d3.behavior.zoom().on("zoom", (function (d) {
        //console.log("onzoom d : ");console.log(d);
        //console.log("onzoom d3 : ");console.log(d3);
        //console.log("svg : ");console.log(svg);
        //console.log("this : ");console.log(this);
        svg.attr("transform", 
          // TODO ? ADD STUFF TO CHECK IF CLASS IS DRAGGABLE !
          "translate(" + d3.event.translate + ")" + 
          " scale(" + d3.event.scale + ")"
          );
      })
    ) )
    .append("g")
    /*
    .call(d3.behavior.zoom().on("zoom", function () {
      console.log("on zoom");
      //svg.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")")
    }))
    */
    //.call(zoom)
    ;
}

/////
this.currentQueryParams = queryParams;  
document.getElementById("infoVizRelations").innerHTML=
'<h3>Group information</h3>  <div id=\"infoVizRelations1\" height='
+document.getElementById("infoVizRelations").getBoundingClientRect().height/3
+' ></div><div id=\"infoVizRelations2\" height='
+document.getElementById("infoVizRelations").getBoundingClientRect().height/3
+'></div> <h3>Clicked element information</h3> <div id=\"textData\">  </div>'


/////
.on("mousedown",function(d){
  if ( d3.event !== null ){        
  }
}
/////
node.attr( "transform", function(d) { //console.log("d : ");console.log(d); 
  if (isDragging && accessionDragged == d.accession[0] ){
    //console.log("node.attr(transform) d3.event!==null : ");console.log(d3.event);
    // TRIALS INTERACTION
    //console.log("d : ");console.log(d);
    //return "translate(" + d.x/2 +","+d.y/2+ ")";
  } else {
    //console.log("node.attr transform d3.event===null : ");console.log(d3.event);
    return "translate(" + d.x + "," + d.y + ")"
    //+" scale("+d3.event.scale+")"
    ;
  }
});


**************

.bar {
  fill: steelblue;
}
.bar:hover {
  fill: green;
}



*************

    /*
    console.log("resultsInfo : ");console.log(resultsInfo);
    console.log("types : ");console.log(types);
    console.log("organisms : ");console.log(organisms);
    console.log("docs : ");console.log(docs);
    console.log("hlDocs : ");console.log(hlDocs);
    console.log("this.queryTerm : ");console.log(this.queryTerm);
    console.log("this.facets.types : ");console.log(this.facets.types);
    console.log("this.facets.organisms : ");console.log(this.facets.organisms);
    console.log("this.facets.organs : ");console.log(this.facets.organs);
    console.log("this.facets : ");console.log(this.facets);
    */


/*
  // Possibility to modify the value for cpt == 0 if we want a special case for sample and group
  if (cpt== 0){
    widthRectangles.push( (width - 5 - margin.right - margin.left)/( Math.floor(results.data.facet_counts.facet_fields.content_type.length/2) ) );
  } else {
    widthRectangles.push(10);
  }
*/


////
// timer to reload  the querySamples function
v-on:keyup="querySamples | debounce 500"/>


///// beans => dev 
solr.server                         http://beans.ebi.ac.uk:8989/solr/
solr.searchapi.server               http://beans.ebi.ac.uk:8989/solr/merged/select?
spring.data.rest.base-path          /api
spring.data.rest.default-page-size  50
spring.thymeleaf.mode               LEGACYHTML5

///// cocoa => cbi
solr.server                         http://cocoa.ebi.ac.uk:9089/solr/
solr.searchapi.server               http://cocoa.ebi.ac.uk:9089/solr/merged/select?


//// Save URL
console.log(" ---- ");
console.log("window.location.pathname : ");
console.log(window.location.pathname);
console.log("window.location.href : ");
console.log(window.location.href);
console.log("document.URL : ");
console.log(document.URL);
console.log(" ---- ");


//// Div #tail that follows the mouse without getting out of the screen
// CSS
#elementHelp {
    position: absolute;
    float: right;
    width:auto;
}
// Javascript
$(document).bind('mousemove', function(e){
    var widthWindow = $(window).width();
    var posX = e.pageX + 20;
    var posY = e.pageY;
    var widthTail = $("#elementHelp").width();
    if ( posX + widthTail >= widthWindow ){
      posX-=2*widthTail;
    }
    $('#elementHelp').css({
       left:  posX,
       top:   posY
    });
});



//// First idea for the add function
  // Bad idea, you need the node in nodeData in order for the force to take it into account
  // var cptDraw = nodeData.nodes.length -1;
  // while( cptDraw>=0 ){
  //  if ( d3.select("#node_"+nodeData.nodes[cptDraw].accession )[0][0] !== null ){
  //    nodeData.nodes.splice(cptDraw,1);
  //  }
  //  cptDraw--;
  // }
  // var cptDraw = nodeData.links.length -1;
  // while( cptDraw>=0 ){
  //  console.log('d3.select("#link_"+nodeData.links[cptDraw].nodeSource.accession)[0][0]+"_"+d3.select("#link_"+nodeData.links[cptDraw].nodeTarget.accession)[0][0] : ');
  //  console.log(d3.select("#link_"+nodeData.links[cptDraw].nodeSource.accession)[0][0]+"_"+d3.select("#link_"+nodeData.links[cptDraw].nodeTarget.accession)[0][0]);
  //  if ( d3.select("#link_"+nodeData.links[cptDraw].nodeSource.accession)[0][0]+"_"+d3.select("#link_"+nodeData.links[cptDraw].nodeTarget.accession)[0][0] !== null ){
  //    nodeData.links.splice(cptDraw,1);
  //  }
  //  cptDraw--;
  // }



//// Avorted code to link according to attributes
function linkPerAttributes(e){
  console.log("linkPerAttributes");
  // console.log("d3.select(e)[0][0] : ");console.log(d3.select(e)[0][0]);
  // console.log("d3.select(e)[0][0].attributes : ");console.log(d3.select(e)[0][0].attributes);
  // console.log('(d3.selectAll(".node") : ');console.log(d3.selectAll(".node"));
  var d3Node = d3.select("#vizSpotRelations");
  var attributeClicked = d3.select(e)[0][0].attributes.id.value.replace(/[^A-Za-z0-9]/g,"") , valueClicked = d3.select(e)[0][0].attributes.value.value.replace(/[^A-Za-z0-9]/g,"");
  console.log("----");
  console.log("attributeClicked : ");console.log(attributeClicked);
  console.log("valueClicked : ");console.log(valueClicked);
  console.log("----");

  var force = d3.layout.force();
  var node = d3Node.selectAll(".node"),
    link = d3Node.selectAll(".link"),
    responseDocs = d3Node.selectAll(".node").select("responseDoc");
}


///// Idea for update function, avorted
var update = function (force,nodes,links) {
  console.log("update");
  var vis = d3.select("#vizSpotRelations");
  var link = vis.selectAll("line")
    .data(links, function (d) {
      return d.source.id + "-" + d.target.id;
    });

    link.enter().append("line")
            .attr("id", function (d) {
                return d.source.id + "-" + d.target.id;
            })
            .attr("stroke-width", function (d) {
                return d.value / 10;
            })
    link.append("title")
            .text(function (d) {
                return d.value;
            });
    link.exit().remove();

    var node = vis.selectAll("g.node")
            .data(nodes, function (d) {
                return d.id;
            });

    var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .call(force.drag);

    nodeEnter.append("svg:circle")
            .attr("r", 12)
            .attr("id", function (d) {
                return "Node;" + d.id;
            })
            .attr("fill", function(d) { return color(d.id); });

    nodeEnter.append("svg:text")
            .attr("class", "node")
            .text(function (d) {
                return d.id;
            });

    node.exit().remove();

    // Restart the force layout.
  var widthTitle = window.innerWidth;
  var width = Math.floor((70 * window.innerWidth)/100);
  var heightD3 = widthTitle/2;
  var height=heightD3;

    var w = width, h = height;
    force
      .gravity(.01)
      .charge(-80000)
      .friction(0)
      .linkDistance( function(d) { return d.value * 10 } )
      .size([w, h])
      .start();
};


// getJSON code to load relationships. Creates issues because it is asynchrounous, instead we // use ajax

  jQuery.getJSON( url, function (data){
  })
  .fail(function(error){
    // This is executed in case of failure of the webservice call.
    console.log("error : ");console.log(error);
    loadedStuff = {};
  })
  .always(function(data){
    console.log("Always");
  })
  .done(function(data){
    console.log("done");
  })
  .complete(function(data){
    console.log("%%%%");
    console.log("complete");
    var nodesObject = {"nodes": [], "edges" : [] };
    // var nodes = data.nodes; var edges = data.edges;
    var nodes = data.responseJSON.nodes; var edges = data.responseJSON.edges;
    nodesObject.nodes = nodes ;
    nodesObject.edges = edges ;
    loadedStuff = nodesObject;    
    console.log("data : ");console.log(data);
    console.log("nodesObject : ");console.log(nodesObject);
    console.log("loadedStuff : ");console.log(loadedStuff);
    console.log("%%%%");
    return nodesObject
  })
  ;



  // Modified Sample with part that will receive the visualisation commented
  <!doctype html>
<html xmlns:th="http://www.thymeleaf.org"
      layout:decorator="__parent_base"
      xmlns:layout="http://www.w3.org/1999/xhtml"
      th:with="currentPage = 'samples'">
<head>
    <title th:text="${sample.accession}">SAMEAxxxxx &lt; BioSamples &lt; EMBL-EBI</title>
</head>
<body>



<main layout:fragment="content">

    <div class="detail_table">
        <h4 th:text="${'Sample ' + sample.accession}">Sample SAMEAxxxxx</h4>

        <table id="bs_results_tablesamplegroupdetail">
            <tbody>
            <!-- Common sample attributes -->
            <tr th:if="${#maps.containsKey(sample.characteristics, 'sample_name') and #arrays.length(sample.characteristics.sample_name) > 0}">
                <td class="col_title"><b>Sample Name : </b></td>
                <td>
                    <div th:each="name: ${sample.characteristicsText.sample_name}">
                        <span th:text="${name}"></span>
                    </div>
                </td>
            </tr>
            <tr th:if="${#maps.containsKey(sample.characteristics, 'sample_title') and #arrays.length(sample.characteristics.sample_title) > 0}">
                <td class="col_title"><b>Sample Title : </b></td>
                <td>
                    <div th:each="title: ${sample.characteristicsText.sample_title}">
                        <span th:text="${title}"></span>
                    </div>
                </td>
            </tr>
            <tr th:if="${#maps.containsKey(sample.characteristics, 'sample_description') and #arrays.length(sample.characteristics.sample_description) > 0}">
                <td class="col_title"><b>Sample Description : </b></td>
                <td>
                    <div th:each="description: ${sample.characteristicsText.sample_description}">
                        <span th:text="${description}"></span>
                    </div>
                </td>
            </tr>

            <!-- Dedicated organism attribute -->
            <tr th:if="${#maps.containsKey(sample.characteristics, 'organism') and #arrays.length(sample.characteristics.organism) > 0}">
                <td class="col_title"><b>Organism : </b></td>
                <td>
                    <div class="characteristic-mapping" th:each="organism: ${sample.characteristics.get('organism')}">
                        <div class="characteristic-mapping-payload" th:text="${organism}">{"foo":"bar"}</div>
                    </div>
                </td>
            </tr>

            <!-- start all characteristics -->
            <tr th:each="characteristic: ${sample.characteristics}" th:unless="${characteristic.key == 'organism' or characteristic.key == 'sample_name'  or characteristic.key == 'sample_title' or characteristic.key == 'sample_description'}">
                <td class="col_title"><b th:utext="${#strings.capitalizeWords(#strings.replace(characteristic.key,'_',' ')) + ' : '}">Characteristic : </b></td>
                <td th:if="${#maps.containsKey(sample.characteristics,characteristic.key)}">
                    <div class="characteristic-mapping" th:each="value: ${sample.characteristics.get(characteristic.key)}">
                        <div class="characteristic-mapping-payload" th:text="${value}">{"foo":"bar"}</div>
                    </div>
                </td>
            </tr>
            <!-- end all characteristics -->

            <!-- update times metadata -->
            <tr>
                <td class="col_title"><b>Release Date :</b></td>
                <td th:text="${sample.releaseDate}"></td>
            </tr>
            <tr>
                <td class="col_title"><b>Last Updated :</b></td>
                <td th:text="${sample.updateDate}"></td>
            </tr>
            <tr>
                <td class="col_title"><b>Groups :</b></td>
                <td>
                    <!--<a href="../group/SAMEG39304"><id>SAMEG39304</id></a>-->
                </td>
            </tr>
            </tbody>
        </table>
    </div>

  <!-- Visualisation Addition -->
  <!-- Here we want to add the code for the visualisation of Tommy to work -->

</main>

<th:block layout:fragment="custom-endpage-scripts">
    <script th:src="@{/javascript/biosamples_sample_links.js}"></script>
    <script th:src="@{/javascript/toolsFunctions.js}"></script>
</th:block>


</body>
</html>
